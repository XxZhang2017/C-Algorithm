Given a string, your task is to count how many palindromic substrings in this string.

The substrings with different start indexes or end indexes are counted as different substrings even they consist of same characters.

The input string length wonâ€™t exceed 1000.
Solution 1: Brute Force

Time complexity: O(n^2)

Space complexity: O(1)

class Solution {
public:
  int countSubstrings(string s) {
    int ans = 0;
    for (int i = 0; i < s.length(); ++i) {
      ans += count(s, i, i); // odd length
      ans += count(s, i, i + 1); // even length
    }
    return ans;
  }
private:
  int count(const string& s, int l, int r) {
    int ans = 0;
    while (l >= 0 && r < s.length() && s[l--] == s[r++])
      ++ans;
    return ans;
  }
};