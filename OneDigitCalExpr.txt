
#include <iostream>
#include <stack>

using namespace std;


struct et
{
    char value;
    et* left, *right;
};

bool isOperator(char c);
void inorder(et* t);
et* newNode(int v);
et* constructTree(char postfix[]);
int evaluate(et* root);

//problem: preOrder inOrder confused
void inorder(et* t){
if(t!=nullptr){
   inorder(t->left);
   std::cout<< t->value;
   
   inorder(t->right);
}
}

//problem: int to char 直接赋值;
//how new struct
et* newNode(int v){
  et* t=new et;
  t->value=char(v);
  t->left=t->right=nullptr;
  return t;

}


//change to string?
//plus input?

//he use strlen(postfix)? what indicate the 
//end in strlen function?
//The first pop is right child

int evaluate(et* root){
      if(root!=nullptr){
          if(root->left==nullptr && root->right==nullptr){
                   cout<<"the char value"<<" "<<root->value<<endl;
                   int var=root->value-'0';
                   cout<<"the value"<<" ";
                   cout<<var<<endl;
                   return var;
          }else{
             int val1=evaluate(root->left);
             int val2=evaluate(root->right);
             if(root->value=='+'){
            
               cout<<val1<<" ";
               cout<<"+"<<" ";
               cout<<val2<<" ";
               cout<<"="<<" "<<val1+val2<<endl;
               
                  return val1+val2;
             }
if(root->value=='-'){
               cout<<val1<<" ";
               cout<<"-"<<" ";
               cout<<val2<<" ";
               cout<<"="<<" "<<val1-val2<<endl;
                  return val1-val2;
}
if(root->value=='*'){
               cout<<val1<<" ";
               cout<<"*"<<" ";
               cout<<val2<<" ";
               cout<<"="<<" "<<val1*val2<<endl;
                  return val1*val2;
}

if(root->value=='/'){
               cout<<val1<<" ";
               cout<<"/"<<" ";
               cout<<val2<<" ";
               cout<<"="<<" "<<val1/val2<<endl;
                  return val1/val2;
}

          }
      }
}

int main(){
char expr[] = "ab+ef*g*-";
    et *root = newNode('+');
    root->left = newNode('*');
    root->left->left = newNode('5');
    root->left->right = newNode('4');
    root->right = newNode('-');
    root->right->left = newNode('1');
    root->right->right = newNode('2');
    cout << evaluate(root) << endl;
   
delete root;
return 0;
}