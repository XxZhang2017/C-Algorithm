bucket sort:
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cstring>
using namespace std;
void BucketSort(int *A,int *B,int N,int K)
{
    int *C=new int[K+1];
    int i,j,k;
    memset(C,0,sizeof(int)*(K+1));
    for (i=0;i<=N;i++) //把A中的每个元素按照值放入桶中
        C[A[i]]++;
    for (i=j=1;i<=K;i++,j=k) //统计每个桶元素的个数，并输出到B
        for (k=j;k<j+C[i];k++)
            B[k]=i;
}
int main()
{
    int *A,*B,N=1000,K=1000,i;
    A=new int[N+1];
    B=new int[N+1];
    for (i=1;i<=N;i++)
        A[i]=rand()%K+1; //生成1..K的随机数
    BucketSort(A,B,N,K);
    for (i=1;i<=N;i++)
        printf("%d ",B[i]);
    return 0;
}




shell sort:
void ShellSort(Record Array[],int n)
int i, delta;
for(del=n/2;delta>0;delta/=2){
   for(i=0;i<delta;i++){
      ModInsSort(&Array[i],n-i,delta);//  pass address of
                                      // Array[i], len(Array)
                                      //is n-i
      }

    //if delta can not be 1 at last
    //use ModInsSort(Array,n,1)
}

void ModInsSort(Record Array[],int n,int delta){
int i,j
for(i=0;i<n;i+=delta){
   
    for(j=i+delta;j>=0;j-=delta){
        if(Array[j]<Array[j-delta]){
          
        swap(Array[j],Array[j-delta]);//swap(Array,j,j-delta)

        }
    }
  }
}

Time:  O(n^2)  n/2 递减
best can be theta(n)   
互质： Hibbard sequence:
2^k-1,2^(k-1)-1  theta(n^1.5)


for(i=delta;i<n;i+=delta)
for(j=i;j>=delta;j-=delta)



#include <iostream>
#include <algorithm>
using namespace std;
void ShellSort(int arr[],int n);
void ModInsSort(int arr[],int n,int delta);
void ModInsSort(int arr[],int n,int delta){
    int i,j;
    for(i=0;i<n;i+=delta){
        for(j=i;j>=0;j-=delta){
            if(arr[j]>arr[j+delta]){
                swap(arr[j],arr[j+delta]);
            }
        }
    }
    for(i=0;i<n;i+=delta){
        cout<<arr[i];
    }
}
void ShellSort(int arr[],int n){
    int i,j,k;
    delta=n/2;
    for(i=delta/2;i>0;i=i/2){
        cout<<"delta is"<<" ";
        cout<<i<<endl;
        ModInsSort(arr,n,i);
       for(k=0;k<n;k++){
           cout<<"after shell"<<" ";
           cout<<i<<endl;
           cout<<arr[k]<<" ";
       }
       cout<<endl;
    }
}
int main()
{
    int arr[10]={49,38,65,97,26,13,27,49,55,4}
    ShellSort(arr);
    return 0;
}