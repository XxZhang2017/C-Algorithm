
DFS in 2_d array graph repr
Given a non-empty 2D array grid of 0's and 1's, an island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.

Find the maximum area of an island in the given 2D array. (If there is no island, the maximum area is 0.)


class Solution {
public:
    int maxAreaOfIsland(vector<vector<int>>& grid) {
        int ct=0;
        int i;
        int j;
        int an=0;
        for(i=0;i<grid.size();i++){
            for(j=0;j<grid[i].size();j++){
                if(grid[i][j]==1){
//                    cout<<"Before--------call dfs"<<" "<<an<<endl;
                    an=max(an,dfs(grid,i,j));
//                    cout<<"After--------call dfs"<<" "<<an<<endl;
                }
                    
                }           
            }
        return an;
    }
    
    int dfs(vector<vector<int>>& g,int i,int j){
        if(g[i][j]==0) return 0;
        int a=1;
        if(g[i][j]!=0){
//            cout<<"in cell"<<" "<<i<<" "<<j;
//            cout<<"the value"<<" "<<g[i][j]<<endl;
            g[i][j]=0;
            if(i-1>=0)a+=dfs(g,i-1,j);
            if(j-1>=0)a+=dfs(g,i,j-1);
            if(i+1<g.size())a+=dfs(g,i+1,j);
            if(j+1<g[i].size())a+=dfs(g,i,j+1);
        }
        return a;
    }
    
};


solution:
BFS

class Solution {
public:
    int maxAreaOfIsland(vector<vector<int>>& grid) {
        int m = grid.size(), n = grid[0].size(), ans = 0;
        for (int i = 0; i < m; i++) 
            for (int j = 0; j < n; j++) 
                if (grid[i][j] == 1) ans = max(ans, area(grid, i, j));
        return ans;
    }
private:
    int area(vector<vector<int>>& grid, int row, int col) {
        int m = grid.size(), n = grid[0].size(), area = 1;
        queue<pair<int,int>> myq;
        myq.push({row, col});
        grid[row][col] = 2;
        vector<int> dir({-1,0,1,0,-1});
        while (!myq.empty()) {
            int z = myq.front().first, x = myq.front().second;
            myq.pop();
            for (int i = 0; i < 4; i++) {
                int r = z+dir[i], c = x+dir[i+1];
                if (r >= 0 && r < m && c >= 0 && c < n && grid[r][c] == 1) {
                    grid[r][c] = 2;
                    area++;
                    myq.push({r,c});
                }
            }
        }
        return area;
    }
};

BFS:
class Solution {
public:
    int maxAreaOfIsland(vector<vector<int>>& grid) {
          int ct=0;
        int i;
        int j;
        int an=0;
        for(i=0;i<grid.size();i++){
            for(j=0;j<grid[i].size();j++){
                if(grid[i][j]==1){
                    an=max(an,bfs(grid,i,j));
                }           
            }
        }
        return an;
     }
    int bfs(vector<vector<int>>& g,int i,int j){
//        cout<<"------------"<<endl;
        queue<pair<int,int>> q;
        q.push({i,j});
            int a=0;
        while(!q.empty()){
            int r=q.front().first;
            int c=q.front().second;
            
//            std::cout<<"visit cell";
//             std::cout<<" "<<r<<" "<<c<<" ";
//             std::cout<<"value"<<" "<<g[r][c]<<endl;
 
            if(g[r][c]==1){

                a++;
                g[r][c]=0;
            if(r-1>=0)q.push({r-1,c});
            if(c-1>=0)q.push({r,c-1});
            if(r+1<g.size())q.push({r+1,c});
            if(c+1<g[r].size())q.push({r,c+1});
           
            }
             q.pop();
                
            
        }
//        cout<<"count is"<<a<<endl;
        return a;
        
    }
};