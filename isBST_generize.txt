
template<typename T>
class BinarySearchTree{
public:
   T data;
   shared_ptr<BinarySearchTree<T>>
};
template<typename T>
bool is_BST_helper(const shared_ptr<BinarySearchTree<T>> & r,const T& lower,
const T& upper){
if(r==null){
    return true;
}
else if(r->data<lower ||r->data>upper){
    return false;
}
return is_BST_helper(r->left,low,r->root)
&& is_BST_helper(r->right,r->root,upper);
}

bool is_BST(const shared_ptr<BinaryTree<T>>& r){
  return is_BST_helper(r,numeric_limits<T>::min(),
numeric_limits<T>::max());
}
