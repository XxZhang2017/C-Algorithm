#include <bits/stdc++.h>
using namespace std;

// Data structure to store a Binary Search Tree node
struct Node
{
	int data;
	Node *left, *right;
};

// Function to create a new binary tree node having given key
Node* newNode(int key)
{
	Node* node = new Node;
	node->data = key;
	node->left = node->right = nullptr;

	return node;
}

// Function to perform inorder traversal of the tree
void inorder(Node* root)
{
	if (root == nullptr)
		return;

	inorder(root->left);
	cout << root->data << " ";
	inorder(root->right);
}

// Recursive function to insert an key into BST using a reference parameter
void insert(Node*& root, int key){
if(!root) {
	root = newNode(key);
		return;
}
if(key<root->data){
return insert(root->left,key);
}else{
  return insert(root->right,key);
}
}


// Iterative function to insert an key into BST
void insertIterative(Node*& root, int key)
{
    if(!root){
    	root = newNode(key);
		return;
    }
Node* dummy=root;
while(dummy->left || dummy->right){
     if(dummy->left&& !dummy->right){
         if(key>dummy->data)
                break;        
         dummy=dummy->left;
     }
     if(!dummy->left && dummy->right){
         if(key<dummy->data)
                break;
     
         dummy=dummy->right;
     }

     if(key<dummy->data){
            dummy=dummy->left;
     }else{
            dummy=dummy->right;
     }
}

     Node* temp= new Node();
     if(key<dummy->data){
               temp->data=key;
               dummy->left=temp;             
         }
     if(key>dummy->data){
               temp->data=key;
               dummy->right=temp;           
         }
}

// main function
int main()
{
	Node* root = nullptr;
	int keys[] = { 15, 10, 20, 8, 12, 16, 25 };

	for (int key : keys)
		insertIterative(root, key);

	inorder(root);

	return 0;
}
